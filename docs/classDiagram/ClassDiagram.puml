@startuml
'https://plantuml.com/class-diagram


class Application {
    - uniClassSet: set<UniClass*>
    - studentSetset: set<Student*>
    - classesPerUcSet: set<schedule>
    - studentsClassSet: set<studentAndClass>
    - studentSchedule: set<studentAndClass>
    - classSchedule: set<ClassSchelude>
    - requests: queue<Request>
    - requestDenied: vector<Request>
    - studentAndClass: struct
    - schedule: struct
    - StudentUcs: struct
    - ClassSchelude: struct
    - Request: struct
    + readUniclasses()
    + readStudents()
    + readClassesPerUC()
    + StudentClass()
    + StudentSchedule()
    + FormatDate()
    + ClassesSchedule()
    + StudentUC()
    + StudentNumbYear()
    + StudentNumbUc()
    + StudentClassUc()
    + RemoveClass()
    + StudentName()
    + AddClass()
    + Overlapping()
    + ResolveRequests()
    + AddAddRequest()
    + AddChangeRequest()
    + AddRemoveRequest()
    + OcupationPerUcClass()
    + saveStudents()
}

class Menu {
    + mainMenu()
    + SchedulePerStudent()
    + ClassMenu()
    + ConstruirATurma()
    + SchedulePerClass()
    + OcupationPerClass()
    + UcNumbers()
    + StudentYears()
    + StudentNUcs()
    + ChangeRequest()
    + RemoveClass()
    + AddClass()
    + ChangeClass()
}

class Student {
    - studentCode: string
    - name: string
    - classes: vector<vector<string>>
    + Student()
    + getName()
    + getStudentCode()
    + getClasses()
    + setName()
    + setStudentCode()
    + addClass()
    + operator<()
    + operator>()
    + operator=()
}

class UniClass {
    - CLASSCODE: string
    - UCCODE: string
    - WEEKDAY: int
    - STARTHOUR: float
    - DURATION: float
    - CLASSTYPE: CLASS_TYPE
    + UniClass()
    + getClassCode()
    + getUcCode()
    + getWeekDay()
    + getStartHour()
    + getDuration()
    + getClassType()
    + setClassCode()
    + setUcCode()
    + setWeekDay()
    + setStartHour()
    + setDuration()
    + setClassType()
}

class BST {
    - root: BinaryNode<Comparable>*
    - ITEM_NOT_FOUND: Comparable
    + BST(const Comparable& notFound)
    + BST(const BST& rhs)
    + ~BST( )
    + findMin()
    + findMax()
    + find(const Comparable& x)
    + isEmpty()
    + printTree()
    + makeEmpty()
    + insert(const Comparable& x)
    + remove(const Comparable& x)
    + BST& operator= (const BST& rhs)
    + begin()
    + end()
    + const Comparable& elementAt(BinaryNode<Comparable>* t)
    + insert(const Comparable& x, BinaryNode<Comparable>* & t)
    + remove(const Comparable& x, BinaryNode<Comparable>* & t)
    + findMin(BinaryNode<Comparable>* t)
    + findMax(BinaryNode<Comparable>* t)
    + find(const Comparable& x, BinaryNode<Comparable>* t)
    + makeEmpty(BinaryNode<Comparable>* & t)
    + printTree(BinaryNode<Comparable>* t)
    + clone(BinaryNode<Comparable>* t)
}

class BinaryNode {
    - element: Comparable
    - left: BinaryNode*
    - right: BinaryNode*
    + BinaryNode()
}
@enduml